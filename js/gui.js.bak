//=================================================================================================
//
//  File: gui.js
//
//  Description:  This file contains all functionality for user input and output.
//
//=================================================================================================

//
// The following variables are for internal GUI use and should not be written outside of GUI processing.
//
var displayLoopTimer            = null;
var lastGuiCurrentMode          = null;
var lastGuiButtonSwDisabled     = null;
var lastGuiButtonTkDisabled     = null;
var lastGuiButtonRegDisabled    = null;
var lastGuiIconRegDisabled      = null;
var lastGuiIconUniiDisabled     = null;
var lastGuiIconSbIfDisabled     = null;
var lastGuiButtonStDisplay      = false;


var szSwButtonImg               = "<img src='img/button_SwUpdate.png' />";
var szTkButtonImg               = "<img src='img/button_TechMode.png' />";
var szRegButtonImg              = "<img src='img/button_Register.png' />";

var szSbIfIconOn                = "<img src='img/southboundif_on.png' />";
var szSbIfIconOff               = "<img src='img/southboundif_off.png' />";
var szRegIconReg                = "<img src='img/reg_yes.png' />";
var szRegIconNotReg             = "<img src='img/reg_no.png' />";                       // With bar
var szUniiIconUp                = "<img src='img/unii_yes.png' />";
var szUniiIconDown              = "<img src='img/unii_no.png' />";
var szMyStatusLine              = "<p id='status_line_id' class='status_line'></p>";
var szSbIfIconButton            = "<button type='button' id='sb_icon_id'   class='bt_icon'   onclick=handleBtInfo()>";
var szRegIconButton             = "<button type='button' id='reg_icon_id'  class='reg_icon'  onclick=handleRegInfo()>";
var szUniiIconButton            = "<button type='button' id='unii_icon_id' class='unii_icon' onclick=handleUniiInfo()>";



// Global functions called from code...........................................................................

// StartGuiInterface............................................................................................
function StartGuiInterface()
{
    PrintLog(1, "StartGuiInterface()" );
    
    // 0 fill our Data Tables...note that .fill(0) function not yet supported.
    for( var i = 0; i < NR_DATA_TABLE_LENGTH; i++ )
    {
        guiNrLabels[i]   = "";
        guiNrUnits[i]    = "";
        guiNrSizeof[i]   = 0;
        guiNr0Values[i]  = 0;
        guiNr1Values[i]  = 0;
        guiNr2Values[i]  = 0;
        guiNr3Values[i]  = 0;
    }

    for( var i = 0; i < NM_DATA_TABLE_LENGTH; i++ )
    {
        guiNmLabels[i]   = "";
        guiNmUnits[i]    = "";
        guiNmSizeof[i]   = 0;
        guiNmValues[i]   = 0;
    }

    for( var i = 0; i < CR_DATA_TABLE_LENGTH; i++ )
    {
        guiCrLabels[i]   = "";
        guiCrUnits[i]    = "";
        guiCrSizeof[i]   = 0;
        guiCr0Values[i]  = 0;
        guiCr1Values[i]  = 0;
        guiCr2Values[i]  = 0;
        guiCr3Values[i]  = 0;
    }

    for( var i = 0; i < CM_DATA_TABLE_LENGTH; i++ )
    {
        guiCmLabels[i]   = "";
        guiCmUnits[i]    = "";
        guiCmSizeof[i]   = 0;
        guiCmValues[i]   = 0;
    }


    guiNrLabels[0] = "Band";
    guiNrLabels[1] = "Technology";
    


    // Start a timer to process user input and output
    displayLoopTimer = setInterval( DisplayLoop, 500);
    
    // Call one time directly to throw up the main page...
    DisplayLoop();

}




// ShowConfirmPopUpMsg....................................................................................
function ShowConfirmPopUpMsg( msg, handler, title, buttonList )
{
    decisionPopUpObj.post( msg, handler, title, buttonList );
}


// ShowWaitPopUpMsg....................................................................................
function ShowWaitPopUpMsg( title, msg )
{
    waitPopUpObj.post( title, msg );
}    
    
// StopWaitPopUpMsg....................................................................................
function StopWaitPopUpMsg()
{
    waitPopUpObj.stop();
}    


// ShowAlertPopUpMsg....................................................................................
function ShowAlertPopUpMsg( title, msg )
{
    alertPopUpObj.post( title, msg );
}    



// UpdateStatusLine....................................................................................
function UpdateStatusLine(statusText)
{
    statusObj.post(statusText);
}







/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Internal functions called from GUI code
//
//

// DisplayLoop............................................................................................
function DisplayLoop()
{
    if( guiCurrentMode == PROG_MODE_MAIN )
    {
        ProcessMainView();
    }
    else if( guiCurrentMode == PROG_MODE_REGISTRATION )
    {
        ProcessRegistrationView();
    }
    else if( guiCurrentMode == PROG_MODE_TECH )
    {
        ProcessTechView();
    }
    else if( guiCurrentMode == PROG_MODE_SETTINGS )
    {
        ProcessSettingsView();
    }
    else if( guiCurrentMode == PROG_MODE_DOWNLOAD )
    {
        ProcessDownloadView();
    }
    
    
    
    
    // Handle common stuff here such as the ICONs
    if( document.getElementById("unii_icon_id") )
    {
        if( lastGuiIconUniiDisabled != guiIconUniiDisabled )
        {
            document.getElementById("unii_icon_id").disabled = lastGuiIconUniiDisabled = guiIconUniiDisabled;
        }    
        
        if( document.getElementById("unii_icon_id").innerHTML != guiIconUniiHtml )
        {
            document.getElementById("unii_icon_id").innerHTML = guiIconUniiHtml;
        }
    }


    if( document.getElementById("reg_icon_id") )
    {
        if( lastGuiIconRegDisabled != guiIconRegDisabled )
        {
            document.getElementById("reg_icon_id").disabled  = lastGuiIconRegDisabled = guiIconRegDisabled;
        }    
        
        if( document.getElementById("reg_icon_id").innerHTML != guiIconRegHtml )
        {
            document.getElementById("reg_icon_id").innerHTML = guiIconRegHtml;
        }
    }



    if( document.getElementById("sb_icon_id") )
    {
        if( lastGuiIconSbIfDisabled != guiIconSbIfDisabled )
        {
            document.getElementById("sb_icon_id").disabled  = lastGuiIconSbIfDisabled = guiIconSbIfDisabled;
        }    
        
        if( document.getElementById("sb_icon_id").innerHTML != guiIconSbIfHtml )
        {
            document.getElementById("sb_icon_id").innerHTML = guiIconSbIfHtml;
        }
    }





    
    

}



// ProcessMainView............................................................................................
function ProcessMainView()
{
    if( lastGuiCurrentMode != guiCurrentMode )
    {
        PrintLog(1, "GUI: ProcessMainView()");
        // Draw the view...
        var myUniiIcon = (bUniiStatusKnown && bUniiUp) ? szUniiIconButton + szUniiIconUp + "</button>" : szUniiIconButton + szUniiIconDown + "</button>";
        var mySbIfIcon = isSouthBoundIfCnx ? szSbIfIconButton + szSbIfIconOn + "</button>" : szSbIfIconButton + szSbIfIconOff + "</button>";
        var myRegIcon  = (nxtyRxRegLockStatus == 0x00) ? szRegIconButton + "</button>" : isRegistered ? szRegIconButton + szRegIconReg + "</button>" : szRegIconButton + szRegIconNotReg + "</button>";
        
        var myHtml = 
            "<img src='img/header_main.png' width='100%' />" +
            
            myUniiIcon +
            mySbIfIcon +
            myRegIcon +
            "<button id='sw_button_id'  type='button' class='mybutton' onclick='RequestModeChange(PROG_MODE_DOWNLOAD)'></button>" +
            "<button id='tk_button_id'  type='button' class='mybutton' onclick='RequestModeChange(PROG_MODE_TECH)'></button>" +
            "<div id='st_button_div_id'></div>" +
            "<button id='reg_button_id' type='button' class='mybutton' onclick='RequestModeChange(PROG_MODE_REGISTRATION)'></button>" +
            
            
            szMyStatusLine;
            

        $('body').html(myHtml); 
        
        
        // Make the ICONs change when touched...  
        document.getElementById("sb_icon_id").addEventListener('touchstart', HandleButtonUp );      // up, adds transparency
        document.getElementById("sb_icon_id").addEventListener('touchend',   HandleButtonDown );    // down, back to normal, no transparency
        document.getElementById("reg_icon_id").addEventListener('touchstart', HandleButtonUp );     // up, adds transparency
        document.getElementById("reg_icon_id").addEventListener('touchend',   HandleButtonDown );   // down, back to normal, no transparency
        document.getElementById("unii_icon_id").addEventListener('touchstart', HandleButtonUp );      // up, adds transparency
        document.getElementById("unii_icon_id").addEventListener('touchend',   HandleButtonDown );    // down, back to normal, no transparency
        
          
        document.getElementById("sw_button_id").addEventListener('touchstart', HandleButtonDown );
        document.getElementById("sw_button_id").addEventListener('touchend',   HandleButtonUp );
        
        document.getElementById("tk_button_id").addEventListener('touchstart', HandleButtonDown );
        document.getElementById("tk_button_id").addEventListener('touchend',   HandleButtonUp );
        
        document.getElementById("reg_button_id").addEventListener('touchstart', HandleButtonDown );
        document.getElementById("reg_button_id").addEventListener('touchend',   HandleButtonUp );

        // Start with the buttons disabled...
        document.getElementById("sw_button_id").disabled  = lastGuiButtonSwDisabled  = guiButtonSwDisabled;
        document.getElementById("tk_button_id").disabled  = lastGuiButtonTkDisabled  = guiButtonTkDisabled;
        document.getElementById("reg_button_id").disabled = lastGuiButtonRegDisabled = guiButtonRegDisabled; 
        
        // Disable the reg icon just in case it does not get displayed... 
        document.getElementById("reg_icon_id").disabled   = lastGuiIconRegDisabled   = guiIconRegDisabled;
        

        // Update our HTML variables with the display...
        guiIconUniiHtml = document.getElementById("unii_icon_id").innerHTML;
        guiIconRegHtml  = document.getElementById("reg_icon_id").innerHTML;
        guiIconSbIfHtml = document.getElementById("sb_icon_id").innerHTML;
        
        // Make sure the settings button gets redisplayed if coming from a different view.
        lastGuiButtonStDisplay = false;
        
        
        lastGuiCurrentMode = guiCurrentMode;    
    }

    // Update the button status...    
    if( document.getElementById("sw_button_id") )
    {
        if( lastGuiButtonSwDisabled != guiButtonSwDisabled )
        {
            document.getElementById("sw_button_id").disabled = lastGuiButtonSwDisabled = guiButtonSwDisabled;
        }    
        
        if( document.getElementById("sw_button_id").innerHTML != guiButtonSwHtml )
        {
            document.getElementById("sw_button_id").innerHTML = guiButtonSwHtml;
        }
    }

    if( document.getElementById("tk_button_id") )
    {
        if( lastGuiButtonTkDisabled != guiButtonTkDisabled )
        {
            document.getElementById("tk_button_id").disabled = lastGuiButtonTkDisabled = guiButtonTkDisabled;
        }    
        
        if( document.getElementById("tk_button_id").innerHTML != guiButtonTkHtml )
        {
            document.getElementById("tk_button_id").innerHTML = guiButtonTkHtml;
        }
    }

    if( lastGuiButtonStDisplay != guiButtonStDisplay )
    {
        // Add the Settings Button...had to use a div in case settins button not displayed and reg button displayed.
        document.getElementById("st_button_div_id").innerHTML = "<button id='st_button_id'  type='button' class='mybutton' onclick='RequestModeChange(PROG_MODE_SETTINGS)'><img src='img/button_Settings.png' /></button>";
        document.getElementById("st_button_id").disabled  = false;
        document.getElementById("st_button_id").addEventListener('touchstart', HandleButtonDown );
        document.getElementById("st_button_id").addEventListener('touchend',   HandleButtonUp );
        
        lastGuiButtonStDisplay = guiButtonStDisplay;
    }

    if( document.getElementById("reg_button_id") )
    {
        if( lastGuiButtonRegDisabled != guiButtonRegDisabled )
        {
            document.getElementById("reg_button_id").disabled = lastGuiButtonRegDisabled = guiButtonRegDisabled;
        }    
        
        if( document.getElementById("reg_button_id").innerHTML != guiButtonRegHtml )
        {
            document.getElementById("reg_button_id").innerHTML = guiButtonRegHtml;
        }
    }
}



// ProcessRegistrationView............................................................................................
function ProcessRegistrationView()
{
    if( lastGuiCurrentMode != guiCurrentMode )
    {
        PrintLog(1, "ProcessRegistrationView()");
        // Draw the view...
        
        lastGuiCurrentMode = guiCurrentMode;    
    }
}


// ProcessTechView............................................................................................
function ProcessTechView()
{
    if( lastGuiCurrentMode != guiCurrentMode )
    {
        PrintLog(1, "GUI: ProcessTechView()");

        // Draw the view...
        var myUniiIcon = (bUniiStatusKnown && bUniiUp) ? szUniiIconButton + szUniiIconUp + "</button>" : szUniiIconButton + szUniiIconDown + "</button>";
        var mySbIfIcon = isSouthBoundIfCnx ? szSbIfIconButton + szSbIfIconOn + "</button>" : szSbIfIconButton + szSbIfIconOff + "</button>";
        var myRegIcon  = (nxtyRxRegLockStatus == 0x00) ? szRegIconButton + "</button>" : isRegistered ? szRegIconButton + szRegIconReg + "</button>" : szRegIconButton + szRegIconNotReg + "</button>";
        
        var myHtml = 
            "<img src='img/header_tech.png' width='100%' />" +
            "<button id='back_arrow_id' type='button' class='back_icon' onclick='RequestModeChange(PROG_MODE_MAIN)'><img src='img/go_back.png'/></button>"+
            myRegIcon +
            mySbIfIcon +
            myUniiIcon +

//            "<br><br><br><h1 id=myH1>Heading</h1><br><br>" +
            "<br><br>" +
            "<table id='tech_table' align='center'>" +
            ThreeColTable +
            "</table>" +
            "<button id='left_arrow_id'  type='button' class='myLeftArrow' onclick='tech.handleLeftKey()'><img src='img/arrow_left.png' /></button>" +
            "<button id='right_arrow_id' type='button' class='myRightArrow' onclick='tech.handleRightKey()'><img src='img/arrow_right.png' /></button>";
            
        $('body').html(myHtml);

        document.getElementById("sb_icon_id").addEventListener('touchstart', HandleButtonUp );      // up, adds transparency
        document.getElementById("sb_icon_id").addEventListener('touchend',   HandleButtonDown );    // down, back to normal, no transparency
        document.getElementById("reg_icon_id").addEventListener('touchstart', HandleButtonUp );     // up, adds transparency
        document.getElementById("reg_icon_id").addEventListener('touchend',   HandleButtonDown );   // down, back to normal, no transparency
        document.getElementById("unii_icon_id").addEventListener('touchstart', HandleButtonUp );      // up, adds transparency
        document.getElementById("unii_icon_id").addEventListener('touchend',   HandleButtonDown );    // down, back to normal, no transparency
        
       
        document.getElementById("back_arrow_id").addEventListener('touchstart', HandleButtonDown );
        document.getElementById("back_arrow_id").addEventListener('touchend',   HandleButtonUp );
        document.getElementById("left_arrow_id").addEventListener('touchstart', HandleButtonDown );
        document.getElementById("left_arrow_id").addEventListener('touchend',   HandleButtonUp );
        document.getElementById("right_arrow_id").addEventListener('touchstart', HandleButtonDown );
        document.getElementById("right_arrow_id").addEventListener('touchend',   HandleButtonUp );
        
        // Update our HTML variables with the display...
        guiIconUniiHtml = document.getElementById("unii_icon_id").innerHTML;
        guiIconRegHtml  = document.getElementById("reg_icon_id").innerHTML;
        guiIconSbIfHtml = document.getElementById("sb_icon_id").innerHTML;
        
        lastGuiCurrentMode = guiCurrentMode;    
    }
}


// ProcessSettingsView............................................................................................
function ProcessSettingsView()
{
    if( lastGuiCurrentMode != guiCurrentMode )
    {
        PrintLog(1, "GUI: ProcessSettingsView()");
        // Draw the view...
        
        lastGuiCurrentMode = guiCurrentMode;    
    }
}


// ProcessDownloadView............................................................................................
function ProcessDownloadView()
{
    if( lastGuiCurrentMode != guiCurrentMode )
    {
        PrintLog(1, "GUI: ProcessDownloadView()");
        // Draw the view...
        
        lastGuiCurrentMode = guiCurrentMode;    
    }
}




// DisplayGuiPopUps............................................................................................
function DisplayGuiPopUps()
{
    // See if any popups need to be displayed...
    // Give priority to the alert...
    if( alertPopUpObj.bDirty )
    {
        alertPopUpObj.onDirty();
    }
    else if( decisionPopUpObj.bDirty )
    {
        decisionPopUpObj.onDirty();
    }
    else if( waitPopUpObj.bDirty )
    {
        waitPopUpObj.onDirty();
    }


    if( statusObj.bDirty )
    {
        statusObj.onDirty();
    }

}



// decisionPopUpObj..................................................................................
var decisionPopUpObj = 
{
    bDirty      : false,
    szTitle     : null,
    szMsg       : null,
    fHandler    : null,
    buttonArray : null,
     

    // Save the data for display...
    post: function( msg, handler, title, buttonList )
    {
        if( this.bDirty == false )
        {
            this.szMsg       = msg;
            this.fHandler    = handler;
            this.szTitle     = title;
            this.buttonArray = buttonList;
            
            this.bDirty = true;
            setTimeout( DisplayGuiPopUps, 10 );     // Kick the display loop...
        }        
    }, 
         
    // Call this handler if the bDirty flag is set by the system...
    onDirty: function() 
    {
        if( this.bDirty )
        {
            PrintLog(1, "ShowConfirmPopUpMsg: " + this.szTitle + " : " + this.szMsg );
            navigator.notification.confirm(
                this.szMsg,                              // message
                this.fHandler,                           // callback to invoke with index of button pressed
                this.szTitle,                            // title
                this.buttonArray );                      // buttonLabels
                
            this.bDirty = false;
        }        
    }
}

// waitPopUpObj..................................................................................
var waitPopUpObj = 
{
    bDirty      : false,
    bActive     : false,
    szTitle     : null,
    szMsg       : null,
     

    // Save the data for display...
    post: function( title, msg )
    {
        if( this.bDirty == false )
        {
            this.szTitle     = title;
            this.szMsg       = msg;
            
            this.bDirty = true;
            setTimeout( DisplayGuiPopUps, 10 );     // Kick the display loop...
        }        
    }, 
         
    // Call this handler if the bDirty flag is set by the system...
    onDirty: function() 
    {
        if( this.bDirty )
        {
            PrintLog(1, "ShowWaitPopUpMsg: " + this.szTitle + " : " + this.szMsg );

            // Had to add a plugin for Spinners since IOS does not support navigator.notification.activityStart()
            this.stop();
            
            // Note: spinner dialog is cancelable by default on Android and iOS. On WP8, it's fixed by default
            // so make fixed on all platforms.
            // Title is only allowed on Android so never show the title.
            window.plugins.spinnerDialog.show(null, this.szMsg, true);
            
                
            this.bActive = true;    
            this.bDirty  = false;
        }        
    },
    
    stop: function()
    {
        if( this.bActive )
        {
            window.plugins.spinnerDialog.hide();
            this.bActive = false;
        }
    }
}


// alertPopUpObj..................................................................................
var alertPopUpObj = 
{
    bDirty      : false,
    szTitle     : null,
    szMsg       : null,
     

    // Save the data for display...
    post: function( title, msg )
    {
        if( this.bDirty == false )
        {
            this.szTitle     = title;
            this.szMsg       = msg;
            
            this.bDirty = true;
            setTimeout( DisplayGuiPopUps, 10 );     // Kick the display loop...
        }        
    }, 
         
    // Call this handler if the bDirty flag is set by the system...
    onDirty: function() 
    {
        if( this.bDirty )
        {
            PrintLog(1, "ShowAlertPopUpMsg: " + this.szTitle + " : " + this.szMsg );

            if(ImRunningOnPhone) 
            {
                navigator.notification.alert(this.szMsg, null, this.szTitle, 'ok');
            } 
            else 
            {
                alert(title ? (title + ": " + message) : message);
            }
            this.bDirty  = false;
        }        
    }
}


// statusObj..................................................................................
var statusObj = 
{
    bDirty      : false,
    szMsg       : null,
     
    // Save the data for display...
    post: function( msg )
    {
        if( this.bDirty == false )
        {
            this.szMsg  = msg;
            this.bDirty = true;
            setTimeout( DisplayGuiPopUps, 10 );     // Kick the display loop...
        }        
    }, 
         
    onDirty: function() 
    {
        if( this.bDirty )
        {
            if( document.getElementById("status_line_id") != null )
            {
                document.getElementById("status_line_id").innerHTML = this.szMsg;
                PrintLog(1, "StatusLine: " + this.szMsg );
            }
            else
            {
                PrintLog(99, "No Status Line ID for: " + this.szMsg );
            }

            this.bDirty  = false;
        }        
    }
}




